// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  passwordHash String
  phone        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Professional {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  phone          String?
  bio            String?
  avatarUrl      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  services       Service[]      @relation("ProfessionalServices")
  workingHours   WorkingHour[]
  breaks         Break[]
  appointments   Appointment[]
}

model Service {
  id              String         @id @default(cuid())
  name            String
  description     String?
  durationMinutes Int
  priceCents      Int
  active          Boolean        @default(true)
  professionals   Professional[] @relation("ProfessionalServices")
  appointments    Appointment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model WorkingHour {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String
  weekday        Int          // 0=Sun ... 6=Sat
  startMinutes   Int          // minutes since 00:00
  endMinutes     Int          // minutes since 00:00
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([professionalId, weekday])
  @@unique([professionalId, weekday])
}

model Break {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String
  startsAt       DateTime     // UTC
  endsAt         DateTime     // UTC
  reason         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([professionalId, startsAt])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id             String             @id @default(cuid())
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  professional   Professional       @relation(fields: [professionalId], references: [id])
  professionalId String
  service        Service            @relation(fields: [serviceId], references: [id])
  serviceId      String
  startsAt       DateTime           // UTC
  endsAt         DateTime           // UTC
  status         AppointmentStatus  @default(PENDING)
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  payment        Payment?
  recurrenceRule RecurrenceRule?

  @@index([professionalId, startsAt])
  @@index([userId, startsAt])
  @@index([status])
}

model Payment {
  id            String   @id @default(cuid())
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?  @unique
  provider      String   // 'stripe', 'paypal', 'cash', etc.
  status        String   // 'pending', 'completed', 'failed', 'refunded'
  amountCents   Int
  reference     String?  // external payment reference
  metadata      Json?    // additional payment data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RecurrenceRule {
  id             String       @id @default(cuid())
  rrule          String       // RFC 5545 RRULE string
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId  String?      @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
